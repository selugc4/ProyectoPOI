name: Build

on:
  push:
  workflow_dispatch:

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Ionic CLI
        working-directory: ./frontend
        run: npm install -g @ionic/cli

      - name: Build project
        working-directory: ./frontend
        run: ionic build -- --base-href /ProyectoPOI/

      - name: Run
        working-directory: ./frontend
        run: npm test -- --no-watch --browsers=ChromeHeadless

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: www
          path: ./frontend/www/

  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run
        working-directory: ./backend
        run: npm test

  deploy-frontend:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-frontend

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with: 
          name: www
          path: ./www

      - name: Deploy to Github Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./www
          publish_branch: gh-pages

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
      - uses: actions/checkout@v3

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=repodocker.azurecr.io/twm:${{ github.run_number }}
          docker build -t $IMAGE_NAME ./backend
          echo ${{ secrets.AZURE_PASSWORD }} | docker login repodocker.azurecr.io -u ${{ secrets.AZURE_USERNAME }} --password-stdin
          docker push $IMAGE_NAME

      - name: Deploy to Azure Web App for Containers
        run: |
          az webapp config container set --name TWM --resource-group cnsa-2024-rg \
            --docker-custom-image-name $IMAGE_NAME